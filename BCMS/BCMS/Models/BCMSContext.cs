// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace BCMS.Models
{
    public partial class BCMSContext : DbContext
    {
        public BCMSContext()
        {
        }

        public BCMSContext(DbContextOptions<BCMSContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Category> Category { get; set; }
        public virtual DbSet<Comment> Comment { get; set; }
        public virtual DbSet<JoinEvent> JoinEvent { get; set; }
        public virtual DbSet<Like> Like { get; set; }
        public virtual DbSet<Manager> Manager { get; set; }
        public virtual DbSet<Media> Media { get; set; }
        public virtual DbSet<Member> Member { get; set; }
        public virtual DbSet<Notification> Notification { get; set; }
        public virtual DbSet<Post> Post { get; set; }
        public virtual DbSet<PostCategory> PostCategory { get; set; }
        public virtual DbSet<ProcessEvent> ProcessEvent { get; set; }
        public virtual DbSet<Report> Report { get; set; }
        public virtual DbSet<ReportType> ReportType { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
                optionsBuilder.UseSqlServer("Data Source=MINHNGUYEN\\SQLEXPRESS;Initial Catalog=BCMS;Persist Security Info=True;User ID=sa;Password=sa");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Comment>(entity =>
            {
                entity.HasOne(d => d.Member)
                    .WithMany(p => p.Comment)
                    .HasForeignKey(d => d.MemberId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Comment_Member");

                entity.HasOne(d => d.Post)
                    .WithMany(p => p.Comment)
                    .HasForeignKey(d => d.PostId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Comment_Post");

                entity.HasOne(d => d.Reply)
                    .WithMany(p => p.InverseReply)
                    .HasForeignKey(d => d.ReplyId)
                    .HasConstraintName("FK_Comment_Comment");
            });

            modelBuilder.Entity<JoinEvent>(entity =>
            {
                entity.HasKey(e => new { e.MemberId, e.PostId });

                entity.HasOne(d => d.Member)
                    .WithMany(p => p.JoinEvent)
                    .HasForeignKey(d => d.MemberId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_JoinEvent_Member");

                entity.HasOne(d => d.Post)
                    .WithMany(p => p.JoinEvent)
                    .HasForeignKey(d => d.PostId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_JoinEvent_Post");
            });

            modelBuilder.Entity<Like>(entity =>
            {
                entity.HasKey(e => new { e.MemberId, e.PostId });

                entity.HasOne(d => d.Member)
                    .WithMany(p => p.Like)
                    .HasForeignKey(d => d.MemberId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Like_Member");

                entity.HasOne(d => d.Post)
                    .WithMany(p => p.Like)
                    .HasForeignKey(d => d.PostId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Like_Post");
            });

            modelBuilder.Entity<Media>(entity =>
            {
                entity.HasOne(d => d.Post)
                    .WithMany(p => p.Media)
                    .HasForeignKey(d => d.PostId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Media_Post");
            });

            modelBuilder.Entity<Notification>(entity =>
            {
                entity.HasOne(d => d.Member)
                    .WithMany(p => p.Notification)
                    .HasForeignKey(d => d.MemberId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Notification_Member");
            });

            modelBuilder.Entity<Post>(entity =>
            {
                entity.HasOne(d => d.Manager)
                    .WithMany(p => p.Post)
                    .HasForeignKey(d => d.ManagerId)
                    .HasConstraintName("FK_Post_Manager");

                entity.HasOne(d => d.Member)
                    .WithMany(p => p.Post)
                    .HasForeignKey(d => d.MemberId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Post_Member");
            });

            modelBuilder.Entity<PostCategory>(entity =>
            {
                entity.HasKey(e => new { e.PostId, e.CategoryId });

                entity.HasOne(d => d.Category)
                    .WithMany(p => p.PostCategory)
                    .HasForeignKey(d => d.CategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PostCategory_Category");

                entity.HasOne(d => d.Post)
                    .WithMany(p => p.PostCategory)
                    .HasForeignKey(d => d.PostId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PostCategory_Post");
            });

            modelBuilder.Entity<ProcessEvent>(entity =>
            {
                entity.HasOne(d => d.Post)
                    .WithMany(p => p.ProcessEvent)
                    .HasForeignKey(d => d.PostId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProcessEvent_Post");
            });

            modelBuilder.Entity<Report>(entity =>
            {
                entity.HasOne(d => d.Manager)
                    .WithMany(p => p.Report)
                    .HasForeignKey(d => d.ManagerId)
                    .HasConstraintName("FK_Report_Manager");

                entity.HasOne(d => d.Member)
                    .WithMany(p => p.Report)
                    .HasForeignKey(d => d.MemberId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Report_Member");

                entity.HasOne(d => d.ReportTypeNavigation)
                    .WithMany(p => p.Report)
                    .HasForeignKey(d => d.ReportType)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Report_ReportType");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}